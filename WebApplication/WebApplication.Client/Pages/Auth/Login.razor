@page "/auth/login"
@layout AuthLayout

@using WebApplication.Shared.User

@inject AuthenticationService authService
@inject NavigationManager navigationManager
@inject ILocalStorageService storageService
<div class="row">
    <div class="col-12">
        <h2>Войдите учетную запись</h2>
        <EditForm Model="model" OnValidSubmit="LoginUser">
            <RadzenCard>
                <AlertMessage Message="@message" MessageType="@messageType" />
                <DataAnnotationsValidator />
                <ValidationSummary />

                <label>Email</label>
                <RadzenTextBox @bind-Value="model.Email"></RadzenTextBox>

                <label>Пароль</label>
                <RadzenPassword @bind-Value="model.Password"></RadzenPassword>

                <hr />

                <RadzenButton ButtonType="Radzen.ButtonType.Submit" Text="Войти"
                              ButtonStyle="Radzen.ButtonStyle.Primary" class="btn-block mr-2"
                              Disabled="isBusy" />

                <RadzenButton ButtonType="Radzen.ButtonType.Submit" Text="Зарегестрироваться"
                              ButtonStyle="Radzen.ButtonStyle.Secondary" class="btn-block mr-2"
                              Disabled="isBusy" Click="GoToRegister"/>
            </RadzenCard>
        </EditForm>

    </div>
</div>


@code {
    LoginViewModel model = new LoginViewModel();

    bool isBusy = false;
    string message = string.Empty;
    Models.AlertMessageType messageType = Models.AlertMessageType.Success;
    public async Task LoginUser()
    {
        isBusy = true;

        var result = await authService.LoginUserAsync(model);
        if (result.IsSuccess)
        {
            message = "Вы вошли!";
            messageType = Models.AlertMessageType.Success;

            var userInfo = new WebApplication.Client.Models.LocalUserInfo()
            {
                AccessToken = result.Message,
                Email = result.UserInfo["Email"],
                Roles = result.UserInfo["Roles"],
                Id = result.UserInfo[System.Security.Claims.ClaimTypes.NameIdentifier]
            };

            await storageService.SetItemAsync("User", userInfo);

        }
        else
        {
            message = result.Message;
            messageType = Models.AlertMessageType.Error;
        }
        isBusy = false;
    }

    void GoToRegister()
    {
        navigationManager.NavigateTo("/auth/register");
    }
}
